import React, { Component } from 'react';
import { Field, reduxForm } from 'redux-form';
import { Link } from 'react-router-dom';
import { connect } from 'react-redux';
import { createPost } from '../actions';

/*
    Component for creating a new blog post

    Field comp only interacts with state
    Field.component is function that returns jsx to display the comp
*/
class PostsNew extends Component {
    /*
        Note that we need to wire up the jsx to the field component
            Field component wired up to be responsible for any changes to input
            use field parameter
        field contains event handlers to wire up the jsx

    */
    renderField(field) {
        const { meta: {touched, error} } = field;
        const className = `form-group ${touched && error ? 'has-danger' : ''}`;
        return (
            <div className={className}>
                <label>{field.label}</label>
                <input 
                    className="form-control"
                    type="text"
                    {...field.input}
                />
                <div className="text-help">
                    {touched ? error : ''}
                </div>
            </div>
        );
    }

    onSubmit(values) {
        this.props.createPost(values, () => { //callback to run after post
            this.props.history.push('/'); //automatically navigate to root path
        });
    }

    /*
        Call bind so the callback (onSubmit) know that this component===this
    */
    render() {
        const { handleSubmit } = this.props;

        return (
            <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>
                {/* label is an arbitrary Field name*/}
                <Field 
                    label="Title"
                    name="title"
                    component={this.renderField}
                />
                <Field
                    label="Categories"
                    name="categories"
                    component={this.renderField}
                />
                <Field
                    label="Post Content"
                    name="content"
                    component={this.renderField}
                />
                <button type="submit" className="btn btn-primary">Submit</button>
                <Link to="/" className="btn btn-danger">Cancel</Link>
            </form>
        );
    }
}

function validate(values) {
    const errors = {};

    //Validate input from values object
    if (!values.title) {
        errors.title = "Missing title";
    }
    if (!values.categories) {
        errors.categories = "Missing categories";
    }
    if (!values.content) {
        errors.content = "Missing content";
    }

    // if empty, redux-form assumes form is fine to submit
    // else, don't submit form/failed validation
    return errors
}

/*
    form property is name of the form
        namesake for all the state generated by this component
    Make sure Form name is unique, in case there are other forms
*/
export default reduxForm({
    validate,
    form: 'PostsNewForm;'
})(
    connect(null, { createPost }) (PostsNew)
);